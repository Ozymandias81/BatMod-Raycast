#library "BATMOD"
#include "zcommon.acs"

global int 0:level;
global int 1:dizzy;
global int 2:dizzyTimer;
global int 3:dizzyAng1;
global int 4:dizzyAng2;
global int 5:dizzyAng3;

int playerID;
int playerNum;

//useful functions
function int degsin(int x){
	int result;
	if (x>=0)
	{
		result=sin(FixedMul(x<<16,0.0111111111)/4);
	}
	else 
	{
		result=-sin(FixedMul(-x<<16,0.0111111111)/4);
	}
	return result;
}

function int degcos(int x){
	return cos(FixedMul(x<<16,0.0111111111)/4);
}

function int sqrt_x3(int number){
	if(number <= 3){
		if(number > 0){
			return 1;
		}
		return 0;
	}
	int oldAns = number >> 1,
	newAns = (oldAns + number / oldAns) >> 1;
	while(newAns < oldAns){
		oldAns = newAns;
		newAns = (oldAns + number / oldAns) >> 1;
	}
	return oldAns;
}

function int abs(int x){
    if (x < 0) return -x;
    return x;
}

function int sqrt_x(int x){
	int r;
	x = x + 1 >> 1;
	while (x > r) x-=r++;
	return r;
}

function int dist (int tid1, int tid2){
	int x, y, z, d;
	x = GetActorX(tid1) - GetActorX(tid2) >> 16; 
	y = GetActorY(tid1) - GetActorY(tid2) >> 16;
	z = GetActorZ(tid1) - GetActorZ(tid2) >> 16;
	d = sqrt_x( x*x + y*y + z*z );
	return d;
}

script "Maplaunch" ENTER
{
	If((GetLevelInfo(LEVELINFO_LEVELNUM)==99)) //prevent fading from following maps defined on MAPINFO
		terminate;
	FadeRange(0,0,0,1.0,0,0,0,0.0,1.5);
	level = GetLevelInfo(LEVELINFO_LEVELNUM);
}

Script 34 (void) //replace it with a namedscript for a better style - ozy81
{
	GiveInventory("darkness", 1);
	SetPlayerProperty(0,1,1);//notarget
	delay(35*1);
	SetPlayerProperty(0,1,10);//infrared
	delay(35*9);
	TakeInventory("darkness", 1);
	SetPlayerProperty(0,0,1);//notarget
	SetPlayerProperty(0,0,10);
}

str BossHealth[11] =
{
	"HEALTH00","HEALTH10","HEALTH20","HEALTH30","HEALTH40","HEALTH50",
	"HEALTH60","HEALTH70","HEALTH80","HEALTH90","HEALTHMX"
};

script 35 (void)//baterang remote control script
{
	
     int MissileID = UniqueTID(); // Get a random TID, it is sure that it will not use an already used one.
     Thing_ChangeTID(0, MissileID); // Set that TID to the fired missile
     SetActivatorToTarget(MissileID); // Use the target to select the player who fired this missile
     ChangeCamera(MissileID, 0, 0); // Set the camera for the player
     //SetPlayerProperty(0, ON, PROP_Frozen); // Don't let the player move
     Thing_ChangeTID(MissileID, 0); // Remove the TID from the missile, as it is no longer needed.
}

script "MiniBossHealth" ENTER  //player is tid 0
{
	SetHudSize(640,400,1);
	while(GetActorProperty(0,APROP_Health)<=0) // if player dead don't run
		delay(1);
	int Utid = UniqueTID(); // generates new tid
	int tid = PickActor(0,GetActorAngle(0),GetActorPitch(0),2000.0,Utid,MF_SHOOTABLE,ML_BLOCKEVERYTHING | ML_BLOCKHITSCAN, PICKAF_RETURNTID);
	if(PickActor(0,GetActorAngle(0),GetActorPitch(0),2000.0,tid)&&CheckFlag(tid,"BOSS"))
	{
		SetFont("SMALLFONT");
		HudMessage(s:GetActorProperty(tid,APROP_NameTag); HUDMSG_PLAIN,21,CR_GRAY,320.0,30.0,0.03);//formerly 41.0 instead of 33
		SetFont(BossHealth[FixedDiv(GetActorProperty(tid,APROP_Health),GetActorProperty(tid,APROP_SpawnHealth))*10/65536]);
		HudMessage(s:"A"; HUDMSG_PLAIN,22,CR_GRAY,320.0,40.0,0.03);//makes lifebar
		//Thing_ChangeTID(tid,0);
	}
	delay(1);
	restart;
}

script "BossHealth"(int tid,int maxhealth)
{
	SetHudSize(640,400,1);
	while(GetActorProperty(tid,APROP_Health)>0)
	{
		SetFont("SMALLFONT");
		HudMessageBold(s:GetActorProperty(tid,APROP_NameTag); HUDMSG_PLAIN,21,CR_GRAY,320.0,41.0,0.03);
		SetFont(BossHealth[FixedDiv(GetActorProperty(tid,APROP_Health),GetActorProperty(tid,APROP_SpawnHealth))*10/65536]);
		HudMessageBold(s:"A"; HUDMSG_PLAIN,22,CR_GRAY,320.0,40.0,0.03);
		delay(1);
	}
}

script "IcyScreen" ENTER
{
	int width = 320, height = 240;
	SetHudSize(width, height, 0);
	SetFont("M_ICED");

	// Half width and height (in fixed-point).
	int half_width  = (width / 2) << 16;
	int half_height = (height / 2) << 16;

	while (true)
	{
		int cold = GetActorPowerupTics(0, "PowerSlow"); //hopefully no other enemies will slow the player than Mr Freeze
		if (cold > 0)
		{
			HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_LAYER_UNDERHUD | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP | HUDMSG_ALPHA , 0, CR_UNTRANSLATED, half_width, half_height, 0.0, 0.5, cold, 0.2);
		}
		
		Delay(1);
	}
}

script "PoisonScreen" ENTER
{
	int width = 320, height = 240;
	SetHudSize(width, height, 0);
	SetFont("M_POIS");

	// Half width and height (in fixed-point).
	int half_width  = (width / 2) << 16;
	int half_height = (height / 2) << 16;

	while (true)
	{
		int dizzyness =  CheckInventory("PoisonIntensity");
		if (dizzyness > 1)
		{
			HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_LAYER_UNDERHUD | HUDMSG_NOTWITHFULLMAP | HUDMSG_NOTWITHOVERLAYMAP | HUDMSG_ALPHA , 0, CR_UNTRANSLATED, half_width, half_height, 0.0, 0.5, dizzyness, 0.2);
		}
		
		Delay(1);
	}
}

Script "PoisonCheck" (void) //somehow this doesn't work as expected, not a problem now anyway
{
	if (CheckActorInventory(playerID,"PoisonStop"))
	{
		ACS_NamedExecute("PoisonEffect",0);
	}
	Delay(1);
	restart;
}

Script "PoisonEffect" (void)
{
	dizzy = CheckInventory("PoisonIntensity");
	dizzy--;
	if (dizzy < 0) dizzy = 0;	
	int dtilt1 = 170;
	int dtilt2 = 170;
	int dpitch = 20;
	dizzytimer+=15;
	if (dizzy < 512)
	{
		int mul = (dizzy*65536)/512;
		dtilt1 = FixedMul(dtilt1,mul);
		dtilt2 = FixedMul(dtilt2,mul);
		dpitch = FixedMul(dpitch,mul);
	}
	int sin2 = Sin(2*dizzytimer*32)/2;
	int sin3 = Sin(3*dizzytimer*32)/2;
	int sin4 = Sin(4*dizzytimer*32)/2;
	int sin5 = Sin(5*dizzytimer*32)/2;
	int gScreenTilt = FixedMul(sin2+sin3,dtilt1);
	int dizzyTilt = FixedMul(sin3+sin4,dtilt2);
	int dizzyPitch = FixedMul(sin4+sin5,dpitch);
	int pitch = GetActorPitch(playerid);
	int roll = GetActorRoll(playerid);
	int angle = GetActorAngle(playerid);
	ChangeActorPitch(playerid,(dizzyPitch-dizzyAng1)*32+Pitch);
	ChangeActorRoll(playerid,(gScreenTilt-dizzyAng2)*32+Roll);
	ChangeActorAngle(playerid,(dizzyTilt-dizzyAng3)*32+Angle);
	dizzyAng1 = dizzyPitch;
	dizzyAng2 = gScreenTilt;
	dizzyAng3 = dizzyTilt;
	TakeInventory("PoisonIntensity", 1);
	Delay(1);
	if (CheckInventory("PoisonIntensity") < 1 )
		{
			ACS_NamedExecute("PoisonCheck", 0);
			terminate;
		}
	restart;
}